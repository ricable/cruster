{"version":3,"sources":["Install/Install.tsx","Learn/Learn.tsx","Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Install","useState","instructions","setInstructions","className","onClick","href","LinuxInstructions","Learn","Home","App","location","useLocation","windowSize","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","displayMainNav","pathname","src","to","style","display","path","Boolean","hostname","match","Bubbles","Array","map","_","i","animationDelay","Math","random","left","widthNum","borderRadius","animationDuration","key","rootElement","document","getElementById","Main","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9abcab43.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport \"./Install.scss\"\n\nconst Install = () => {\n  const [instructions, setInstructions] = useState(<div />)\n  return (\n    <div>\n      <nav>\n        <ul className=\"nav-list nav-download\">\n          <li onClick={() => setInstructions(<div />)}>\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Mac-OS-X-cruster-0.1.0.dmg\">\n              <div className=\"btn btn-three\">\n                Mac\n              </div>\n            </a>\n          </li>\n          <li onClick={() => setInstructions(<div />)}>\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Windows-cruster-setup-0.1.0.exe\">\n              <div className=\"btn btn-three\">\n                Windows\n              </div>\n            </a>\n          </li>\n          <li onClick={() => setInstructions(LinuxInstructions)}>\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Linux-cruster-0.1.0.AppImage\">\n              <div className=\"btn btn-three\">\n                Linux\n              </div>\n            </a>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"note\">\n        Note: 64-bit support only\n      </div>\n      {instructions}\n    </div>\n  )\n}\nexport default Install\n\nconst linuxInstructions =\n`cd ~/Downloads\nchmod +x Linux-Cruster-0.1.0.AppImage\n./Linux-Cruster-0.1.0.AppImage`\n\nconst LinuxInstructions = () => {\n  return (\n    <div className=\"instructions\">\n      To run on Linux, make the AppImage executable and then run it, e.g.:\n      <code>\n      {linuxInstructions}\n      </code>\n      Snap installation coming soon (pending snapcraft approval)\n    </div>\n  )\n}","import React from 'react'\n\nconst Learn = () => {\n  return (\n    <div>\n      Learn\n    </div>\n  )\n}\nexport default Learn","import React from 'react'\n\nconst Home = () => {\n  return (\n    <div>\n    </div>\n  )\n}\nexport default Home","import React, { useState, useEffect } from 'react';\nimport './cool-btns.scss'\nimport './App.scss';\nimport {\n  Switch,\n  Route,\n  Link,\n  useLocation\n} from \"react-router-dom\"\nimport Install from './Install/Install';\nimport Learn from './Learn/Learn';\nimport Home from './Home/Home';\n\n\nfunction App() {\n  const location = useLocation()\n  const windowSize = useWindowSize()\n  const displayMainNav = location.pathname === \"/\" || windowSize.width > 600 ? \"block\" : \"none\"\n  return (\n    <div className=\"container\">\n      <a className=\"github\" href=\"https://github.com/zwhitchcox/cruster\">\n        <img className=\"gh-icon\" src=\"/github.png\" />\n      </a>\n      <Link to=\"/\"><h1>Cruster</h1></Link>\n      <nav style={{display: displayMainNav}}>\n        <ul className=\"nav-list\">\n          <li>\n            <Link to=\"/install\">\n              <div className=\"btn btn-one\">\n                Install\n              </div>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/learn\">\n              <div className=\"btn btn-one\">\n                Learn\n              </div>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n        <Switch>\n          <Route path=\"/install\">\n            <Install />\n          </Route>\n          <Route path=\"/learn\">\n            <Learn />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState<any>({\n    width: undefined,\n    height: undefined,\n  });\n\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bg.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst Bubbles = () => (\n  <div className=\"bg-bubbles-container\">\n    <ul className=\"bg-bubbles\">\n      {[...new Array(20)].map((_, i) => {\n        const animationDelay = (Math.random() * 30) + 's'\n        const left = (Math.random() * 100) + '%'\n        const widthNum = (Math.random() * 200)\n        const height = widthNum + 'px'\n        const width = widthNum + 'px'\n        const borderRadius = (Math.random() > .5 ? 0 : widthNum / 2) + 'px'\n        const animationDuration = (40 + Math.random() * 40) + 's'\n\n        return (\n          <li key={i} style={{animationDelay, left, width, borderRadius, height, animationDuration}} />\n        )\n      })}\n    </ul>\n  </div>\n)\nconst rootElement = document.getElementById(\"root\");\n\n\nconst Main = () => (\n  <React.StrictMode>\n    <Router>\n      <>\n      <Bubbles />\n      <div className=\"App\">\n        <App />\n      </div>\n      </>\n\n    </Router>\n  </React.StrictMode>\n)\nif ((rootElement as any).hasChildNodes()) {\n  ReactDOM.hydrate(<Main />, rootElement);\n} else {\n  ReactDOM.render(<Main />, rootElement);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}