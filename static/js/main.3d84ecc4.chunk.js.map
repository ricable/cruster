{"version":3,"sources":["Download/Download.tsx","Learn/Learn.tsx","Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Install","className","href","Learn","Home","App","displayMainNav","useLocation","pathname","window","innerWidth","to","style","display","path","Boolean","location","hostname","match","Bubbles","Array","map","_","i","animationDelay","Math","random","left","widthNum","height","width","borderRadius","animationDuration","key","rootElement","document","getElementById","Main","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAuCeA,G,MAnCC,WACd,OACE,6BACE,6BACE,wBAAIC,UAAU,yBACZ,4BACE,uBAAGC,KAAI,mEARH,QAQG,6BARH,QAQG,SACL,yBAAKD,UAAU,iBAAf,SAKJ,4BACE,uBAAGC,KAAI,mEAfH,QAeG,kCAfH,QAeG,SACL,yBAAKD,UAAU,iBAAf,aAKJ,4BACE,uBAAGC,KAAI,mEAtBH,QAsBG,0BAtBH,QAsBG,cACL,yBAAKD,UAAU,iBAAf,aAOR,yBAAKA,UAAU,QAAf,gCCvBSE,EAPD,WACZ,OACE,uCCIWC,EANF,WACX,OACE,+BCkDWC,MAvCf,WACE,IACMC,EAAuC,MAD5BC,cACeC,UAAoBC,OAAOC,WAAa,IAAM,QAAU,OACxF,OACE,yBAAKT,UAAU,aACb,kBAAC,IAAD,CAAMU,GAAG,KAAI,wCACb,yBAAKC,MAAO,CAACC,QAASP,IACpB,wBAAIL,UAAU,YACZ,4BACE,kBAAC,IAAD,CAAMU,GAAG,aACP,yBAAKV,UAAU,eAAf,cAKJ,4BACE,kBAAC,IAAD,CAAMU,GAAG,UACP,yBAAKV,UAAU,eAAf,aAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCnCQC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAU,kBACd,wBAAIlB,UAAU,cACX,YAAI,IAAImB,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAC1B,IAAMC,EAAkC,GAAhBC,KAAKC,SAAiB,IACxCC,EAAwB,IAAhBF,KAAKC,SAAkB,IAC/BE,EAA4B,IAAhBH,KAAKC,SACjBG,EAASD,EAAW,KACpBE,EAAQF,EAAW,KACnBG,GAAgBN,KAAKC,SAAW,GAAK,EAAIE,EAAW,GAAK,KACzDI,EAAqB,GAAqB,GAAhBP,KAAKC,SAAiB,IAEtD,OACE,wBAAIO,IAAKV,EAAGX,MAAO,CAACY,iBAAgBG,OAAMG,QAAOC,eAAcF,SAAQG,4BAKzEE,EAAcC,SAASC,eAAe,QAGtCC,EAAO,kBACX,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UAKHiC,EAAoBK,gBACvBC,IAASC,QAAQ,kBAAC,EAAD,MAAUP,GAE3BM,IAASE,OAAO,kBAAC,EAAD,MAAUR,GDmGtB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d84ecc4.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Download.css\"\nconst version = \"0.1.0\"\n\nconst Install = () => {\n  return (\n    <div>\n      <nav>\n        <ul className=\"nav-list nav-download\">\n          <li>\n            <a href={`https://github.com/zwhitchcox/cruster/releases/download/v${version}/Mac-OS-X-cruster-${version}.dmg`}>\n              <div className=\"btn btn-three\">\n                Mac\n              </div>\n            </a>\n          </li>\n          <li>\n            <a href={`https://github.com/zwhitchcox/cruster/releases/download/v${version}/Windows-cruster-setup-${version}.exe`}>\n              <div className=\"btn btn-three\">\n                Windows\n              </div>\n            </a>\n          </li>\n          <li>\n            <a href={`https://github.com/zwhitchcox/cruster/releases/download/v${version}/Linux-cruster-${version}.AppImage`}>\n              <div className=\"btn btn-three\">\n                Linux\n              </div>\n            </a>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"note\">\n        Note: 64-bit support only\n      </div>\n\n    </div>\n  )\n}\nexport default Install","import React from 'react'\n\nconst Learn = () => {\n  return (\n    <div>\n      Learn\n    </div>\n  )\n}\nexport default Learn","import React from 'react'\n\nconst Home = () => {\n  return (\n    <div>\n    </div>\n  )\n}\nexport default Home","import React from 'react';\nimport './bg.scss';\nimport './cool-btns.scss'\nimport './App.scss';\nimport {\n  Switch,\n  Route,\n  Link,\n  useLocation\n} from \"react-router-dom\"\nimport Download from './Download/Download';\nimport Learn from './Learn/Learn';\nimport Home from './Home/Home';\n\n\nfunction App() {\n  const location = useLocation()\n  const displayMainNav = location.pathname === \"/\" || window.innerWidth > 600 ? \"block\" : \"none\"\n  return (\n    <div className=\"container\">\n      <Link to=\"/\"><h1>Cruster</h1></Link>\n      <nav style={{display: displayMainNav}}>\n        <ul className=\"nav-list\">\n          <li>\n            <Link to=\"/download\">\n              <div className=\"btn btn-one\">\n                Download\n              </div>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/learn\">\n              <div className=\"btn btn-one\">\n                Learn\n              </div>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n        <Switch>\n          <Route path=\"/download\">\n            <Download />\n          </Route>\n          <Route path=\"/learn\">\n            <Learn />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst Bubbles = () => (\n  <ul className=\"bg-bubbles\">\n    {[...new Array(20)].map((_, i) => {\n      const animationDelay = (Math.random() * 30) + 's'\n      const left = (Math.random() * 100) + '%'\n      const widthNum = (Math.random() * 200)\n      const height = widthNum + 'px'\n      const width = widthNum + 'px'\n      const borderRadius = (Math.random() > .5 ? 0 : widthNum / 2) + 'px'\n      const animationDuration = (40 + Math.random() * 40) + 's'\n\n      return (\n        <li key={i} style={{animationDelay, left, width, borderRadius, height, animationDuration}} />\n      )\n    })}\n  </ul>\n)\nconst rootElement = document.getElementById(\"root\");\n\n\nconst Main = () => (\n  <React.StrictMode>\n    <Router>\n      <div className=\"App\">\n        <App />\n        <Bubbles />\n      </div>\n    </Router>\n  </React.StrictMode>\n)\nif ((rootElement as any).hasChildNodes()) {\n  ReactDOM.hydrate(<Main />, rootElement);\n} else {\n  ReactDOM.render(<Main />, rootElement);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}