{"version":3,"sources":["Download/Download.tsx","Learn/Learn.tsx","Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Install","useState","instructions","setInstructions","className","onClick","href","LinuxInstructions","Learn","Home","App","location","useLocation","windowSize","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","displayMainNav","pathname","to","style","display","path","Boolean","hostname","match","Bubbles","Array","map","_","i","animationDelay","Math","random","left","widthNum","borderRadius","animationDuration","backgroundColor","key","rootElement","document","getElementById","Main","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAuCeA,G,MApCC,WAAO,IAAD,EACoBC,mBAAS,+BAD7B,mBACbC,EADa,KACCC,EADD,KAEpB,OACE,6BACE,6BACE,wBAAIC,UAAU,yBACZ,wBAAIC,QAAS,kBAAMF,EAAgB,iCACjC,uBAAGG,KAAK,6FACN,yBAAKF,UAAU,iBAAf,SAKJ,wBAAIC,QAAS,kBAAMF,EAAgB,iCACjC,uBAAGG,KAAK,kGACN,yBAAKF,UAAU,iBAAf,aAKJ,wBAAIC,QAAS,kBAAMF,EAAgBI,KACjC,uBAAGD,KAAK,+FACN,yBAAKF,UAAU,iBAAf,aAOR,yBAAKA,UAAU,QAAf,6BAGCF,KAWDK,EAAoB,WACxB,OACE,yBAAKH,UAAU,gBAAf,uEAEE,8BATiB,yFAOnB,+DCvCWI,EAPD,WACZ,OACE,uCCIWC,EANF,WACX,OACE,+BCmDWC,MAxCf,WACE,IAAMC,EAAWC,cACXC,EAwCR,WAAyB,MAGaZ,mBAAc,CAChDa,WAAOC,EACPC,YAAQD,IALa,mBAGhBF,EAHgB,KAGJI,EAHI,KA6BvB,OApBAC,qBAAU,WAER,SAASC,IAEPF,EAAc,CACZH,MAAOM,OAAOC,WACdL,OAAQI,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIN,EArEYY,GACbC,EAAuC,MAAtBf,EAASgB,UAAoBd,EAAWC,MAAQ,IAAM,QAAU,OACvF,OACE,yBAAKV,UAAU,aACb,kBAAC,IAAD,CAAMwB,GAAG,KAAI,wCACb,yBAAKC,MAAO,CAACC,QAASJ,IACpB,wBAAItB,UAAU,YACZ,4BACE,kBAAC,IAAD,CAAMwB,GAAG,aACP,yBAAKxB,UAAU,eAAf,cAKJ,4BACE,kBAAC,IAAD,CAAMwB,GAAG,UACP,yBAAKxB,UAAU,eAAf,aAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCpCQC,QACW,cAA7BZ,OAAOT,SAASsB,UAEe,UAA7Bb,OAAOT,SAASsB,UAEhBb,OAAOT,SAASsB,SAASC,MACvB,2DCXN,IAAMC,EAAU,kBACd,wBAAI/B,UAAU,cACX,YAAI,IAAIgC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAC1B,IAAMC,EAAkC,GAAhBC,KAAKC,SAAiB,IACxCC,EAAwB,IAAhBF,KAAKC,SAAkB,IAC/BE,EAA4B,IAAhBH,KAAKC,SACjB1B,EAAS4B,EAAW,KACpB9B,EAAQ8B,EAAW,KACnBC,GAAgBJ,KAAKC,SAAW,GAAK,EAAIE,EAAW,GAAK,KACzDE,EAAqB,GAAqB,GAAhBL,KAAKC,SAAiB,IAChDK,EAAe,8BAA0C,GAAhBN,KAAKC,SAA/B,KAErB,OACE,wBAAIM,IAAKT,EAAGV,MAAO,CAACW,iBAAgBG,OAAM7B,QAAO+B,eAAc7B,SAAQ8B,oBAAmBC,0BAK5FE,EAAcC,SAASC,eAAe,QAGtCC,EAAO,kBACX,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,UAKH6C,EAAoBK,gBACvBC,IAASC,QAAQ,kBAAC,EAAD,MAAUP,GAE3BM,IAASE,OAAO,kBAAC,EAAD,MAAUR,GDkGtB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63ecb82b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport \"./Download.scss\"\r\n\r\nconst Install = () => {\r\n  const [instructions, setInstructions] = useState(<div />)\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <ul className=\"nav-list nav-download\">\r\n          <li onClick={() => setInstructions(<div />)}>\r\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Mac-OS-X-cruster-0.1.0.dmg\">\r\n              <div className=\"btn btn-three\">\r\n                Mac\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li onClick={() => setInstructions(<div />)}>\r\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Windows-cruster-setup-0.1.0.exe\">\r\n              <div className=\"btn btn-three\">\r\n                Windows\r\n              </div>\r\n            </a>\r\n          </li>\r\n          <li onClick={() => setInstructions(LinuxInstructions)}>\r\n            <a href=\"https://github.com/zwhitchcox/cruster/releases/download/v0.1.0/Linux-cruster-0.1.0.AppImage\">\r\n              <div className=\"btn btn-three\">\r\n                Linux\r\n              </div>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"note\">\r\n        Note: 64-bit support only\r\n      </div>\r\n      {instructions}\r\n    </div>\r\n  )\r\n}\r\nexport default Install\r\n\r\nconst linuxInstructions =\r\n`cd ~/Downloads\r\nchmod +x Linux-Cruster-0.1.0.AppImage\r\n./Linux-Cruster-0.1.0.AppImage`\r\n\r\nconst LinuxInstructions = () => {\r\n  return (\r\n    <div className=\"instructions\">\r\n      To run on Linux, make the AppImage executable and then run it, e.g.:\r\n      <code>\r\n      {linuxInstructions}\r\n      </code>\r\n      Snap installation coming soon (pending snapcraft approval)\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nconst Learn = () => {\r\n  return (\r\n    <div>\r\n      Learn\r\n    </div>\r\n  )\r\n}\r\nexport default Learn","import React from 'react'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n    </div>\r\n  )\r\n}\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\nimport './bg.scss';\r\nimport './cool-btns.scss'\r\nimport './App.scss';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useLocation\r\n} from \"react-router-dom\"\r\nimport Download from './Download/Download';\r\nimport Learn from './Learn/Learn';\r\nimport Home from './Home/Home';\r\n\r\n\r\nfunction App() {\r\n  const location = useLocation()\r\n  const windowSize = useWindowSize()\r\n  const displayMainNav = location.pathname === \"/\" || windowSize.width > 600 ? \"block\" : \"none\"\r\n  return (\r\n    <div className=\"container\">\r\n      <Link to=\"/\"><h1>Cruster</h1></Link>\r\n      <nav style={{display: displayMainNav}}>\r\n        <ul className=\"nav-list\">\r\n          <li>\r\n            <Link to=\"/download\">\r\n              <div className=\"btn btn-one\">\r\n                Download\r\n              </div>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/learn\">\r\n              <div className=\"btn btn-one\">\r\n                Learn\r\n              </div>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n        <Switch>\r\n          <Route path=\"/download\">\r\n            <Download />\r\n          </Route>\r\n          <Route path=\"/learn\">\r\n            <Learn />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState<any>({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst Bubbles = () => (\r\n  <ul className=\"bg-bubbles\">\r\n    {[...new Array(20)].map((_, i) => {\r\n      const animationDelay = (Math.random() * 30) + 's'\r\n      const left = (Math.random() * 100) + '%'\r\n      const widthNum = (Math.random() * 200)\r\n      const height = widthNum + 'px'\r\n      const width = widthNum + 'px'\r\n      const borderRadius = (Math.random() > .5 ? 0 : widthNum / 2) + 'px'\r\n      const animationDuration = (40 + Math.random() * 40) + 's'\r\n      const backgroundColor = `rgba(255, 255, 255, ${Math.random() * .2})`\r\n\r\n      return (\r\n        <li key={i} style={{animationDelay, left, width, borderRadius, height, animationDuration, backgroundColor}} />\r\n      )\r\n    })}\r\n  </ul>\r\n)\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n\r\nconst Main = () => (\r\n  <React.StrictMode>\r\n    <Router>\r\n      <div className=\"App\">\r\n        <App />\r\n        <Bubbles />\r\n      </div>\r\n    </Router>\r\n  </React.StrictMode>\r\n)\r\nif ((rootElement as any).hasChildNodes()) {\r\n  ReactDOM.hydrate(<Main />, rootElement);\r\n} else {\r\n  ReactDOM.render(<Main />, rootElement);\r\n}\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}